// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRoundTriper is a mock of RoundTriper interface.
type MockRoundTriper struct {
	ctrl     *gomock.Controller
	recorder *MockRoundTriperMockRecorder
}

// MockRoundTriperMockRecorder is the mock recorder for MockRoundTriper.
type MockRoundTriperMockRecorder struct {
	mock *MockRoundTriper
}

// NewMockRoundTriper creates a new mock instance.
func NewMockRoundTriper(ctrl *gomock.Controller) *MockRoundTriper {
	mock := &MockRoundTriper{ctrl: ctrl}
	mock.recorder = &MockRoundTriperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoundTriper) EXPECT() *MockRoundTriperMockRecorder {
	return m.recorder
}

// RoundTrip mocks base method.
func (m *MockRoundTriper) RoundTrip(request *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoundTrip", request)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoundTrip indicates an expected call of RoundTrip.
func (mr *MockRoundTriperMockRecorder) RoundTrip(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundTrip", reflect.TypeOf((*MockRoundTriper)(nil).RoundTrip), request)
}
