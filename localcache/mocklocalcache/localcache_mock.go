// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mocklocalcache is a generated GoMock package.
package mocklocalcache

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	localcache "trpc.group/trpc-go/trpc-database/localcache"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockCache) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockCache)(nil).Clear))
}

// Close mocks base method.
func (m *MockCache) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCache)(nil).Close))
}

// Del mocks base method.
func (m *MockCache) Del(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Del", key)
}

// Del indicates an expected call of Del.
func (mr *MockCacheMockRecorder) Del(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockCache)(nil).Del), key)
}

// Get mocks base method.
func (m *MockCache) Get(key string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}

// GetWithCustomLoad mocks base method.
func (m *MockCache) GetWithCustomLoad(ctx context.Context, key string, customLoad localcache.LoadFunc, ttl int64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithCustomLoad", ctx, key, customLoad, ttl)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithCustomLoad indicates an expected call of GetWithCustomLoad.
func (mr *MockCacheMockRecorder) GetWithCustomLoad(ctx, key, customLoad, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithCustomLoad", reflect.TypeOf((*MockCache)(nil).GetWithCustomLoad), ctx, key, customLoad, ttl)
}

// GetWithLoad mocks base method.
func (m *MockCache) GetWithLoad(ctx context.Context, key string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithLoad", ctx, key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithLoad indicates an expected call of GetWithLoad.
func (mr *MockCacheMockRecorder) GetWithLoad(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithLoad", reflect.TypeOf((*MockCache)(nil).GetWithLoad), ctx, key)
}

// GetWithStatus mocks base method.
func (m *MockCache) GetWithStatus(key string) (interface{}, localcache.CachedStatus) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithStatus", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(localcache.CachedStatus)
	return ret0, ret1
}

// GetWithStatus indicates an expected call of GetWithStatus.
func (mr *MockCacheMockRecorder) GetWithStatus(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithStatus", reflect.TypeOf((*MockCache)(nil).GetWithStatus), key)
}

// Len mocks base method.
func (m *MockCache) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockCacheMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockCache)(nil).Len))
}

// MGetWithCustomLoad mocks base method.
func (m *MockCache) MGetWithCustomLoad(ctx context.Context, keys []string, customLoad localcache.MLoadFunc, ttl int64) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetWithCustomLoad", ctx, keys, customLoad, ttl)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetWithCustomLoad indicates an expected call of MGetWithCustomLoad.
func (mr *MockCacheMockRecorder) MGetWithCustomLoad(ctx, keys, customLoad, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetWithCustomLoad", reflect.TypeOf((*MockCache)(nil).MGetWithCustomLoad), ctx, keys, customLoad, ttl)
}

// MGetWithLoad mocks base method.
func (m *MockCache) MGetWithLoad(ctx context.Context, keys []string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetWithLoad", ctx, keys)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetWithLoad indicates an expected call of MGetWithLoad.
func (mr *MockCacheMockRecorder) MGetWithLoad(ctx, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetWithLoad", reflect.TypeOf((*MockCache)(nil).MGetWithLoad), ctx, keys)
}

// Set mocks base method.
func (m *MockCache) Set(key string, value interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), key, value)
}

// SetWithExpire mocks base method.
func (m *MockCache) SetWithExpire(key string, value interface{}, ttl int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithExpire", key, value, ttl)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetWithExpire indicates an expected call of SetWithExpire.
func (mr *MockCacheMockRecorder) SetWithExpire(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithExpire", reflect.TypeOf((*MockCache)(nil).SetWithExpire), key, value, ttl)
}
